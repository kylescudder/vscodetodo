{
  "version": 3,
  "file": "sidebar.css",
  "sources": [
    "ToDos.svelte",
    "sidebar.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { onMount } from \"svelte\";\nimport { children } from \"svelte/internal\";\n;\nimport { apiBaseUrl } from \"../../src/constants\";\nexport let user;\nexport let accessToken;\nlet text = '';\nlet categoryText = '';\nlet todos = [];\nlet selected;\nlet answer = \"\";\nlet categorie = [];\nfunction addToDo(t, categorieText) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield fetch(`${apiBaseUrl}/todo`, {\n            method: \"POST\",\n            body: JSON.stringify({\n                text: t,\n                categorieText: categorieText,\n            }),\n            headers: {\n                \"content-type\": \"application/json\",\n                authorization: `Bearer ${accessToken}`,\n            },\n        });\n        getToDo()\n            .then(() => { })\n            .catch(() => {\n            console.log(\"Getting todos failed\");\n        });\n        setTimeout(function () {\n            hideEmptyCategories();\n        }, 100);\n    });\n}\nfunction addCategory(t) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield fetch(`${apiBaseUrl}/category`, {\n            method: 'POST',\n            body: JSON.stringify({\n                categorieText: t,\n            }),\n            headers: {\n                'content-type': 'application/json',\n                authorization: `Bearer ${accessToken}`,\n            },\n        });\n        categoryPopulate()\n            .then(() => {\n        })\n            .catch(() => {\n            console.log('Getting todos failed');\n        });\n        setTimeout(function () {\n            hideEmptyCategories();\n        }, 100);\n    });\n}\nfunction getToDo() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield fetch(`${apiBaseUrl}/todo`, {\n            headers: {\n                authorization: `Bearer ${accessToken}`,\n            },\n        });\n        const payload = yield response.json();\n        todos = payload.data;\n        return todos;\n    });\n}\nfunction categoryHide(event) {\n    if (!event.target.nextElementSibling.classList.contains(\"collapsed\")) {\n        event.target.nextElementSibling.classList.add(\"collapsed\");\n        event.target.firstElementChild.classList.remove(\"expanded\");\n    }\n    else {\n        event.target.nextElementSibling.classList.remove(\"collapsed\");\n        event.target.firstElementChild.classList.add(\"expanded\");\n    }\n}\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    window.addEventListener(\"message\", (event) => __awaiter(void 0, void 0, void 0, function* () {\n        const message = event.data; // The json data that the extension sent\n        switch (message.type) {\n            case \"new-todo\":\n                addToDo(message.value, selected.toString());\n                break;\n        }\n    }));\n    getToDo()\n        .then(() => { })\n        .catch(() => {\n        console.log(\"Getting todos failed\");\n    });\n    categoryPopulate();\n}));\nfunction categoryPopulate() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const categorieResponse = yield fetch(`${apiBaseUrl}/categories`, {\n            headers: {\n                authorization: `Bearer ${accessToken}`,\n            },\n        });\n        const categoriePayload = yield categorieResponse.json();\n        categorie = categoriePayload.payload;\n        selected = categorie[0].text;\n        setTimeout(function () {\n            hideEmptyCategories();\n        }, 100);\n    });\n}\nfunction hideEmptyCategories() {\n    var arr = Array.from(document.getElementsByClassName(\"card\"));\n    for (let i = 0; i < arr.length; i++) {\n        const element = arr[i];\n        const lists = element.children[1];\n        if (lists.childElementCount == 0) {\n            element.removeAttribute(\"style\");\n            element.setAttribute(\"style\", \"display: none;\");\n        }\n        else {\n            element.removeAttribute(\"style\");\n            element.setAttribute(\"style\", \"display: block;\");\n        }\n    }\n}\n</script>\n\n<div>Hello {user.name}</div>\n<form\n  on:submit|preventDefault={async () => {\n    addToDo(text, selected.toString());\n    text = \"\";\n  }}\n>\n  <input bind:value={text} class=\"fieldInput\" placeholder=\"Add this todo\" />\n  <select\n    bind:value={selected}\n    on:blur={() => (answer = \"\")}\n    class=\"fieldInput categoryDropdown\"\n  >\n    {#each categorie as categories}\n      <option value={categories.text}>\n        {categories.text}\n      </option>\n    {/each}\n  </select>\n</form>\n<form\n  on:submit|preventDefault={async () => {\n    addCategory(categoryText);\n    categoryText = \"\";\n  }}\n>\n  <input\n    bind:value={categoryText}\n    class=\"fieldInput categoryDropdown\"\n    placeholder=\"Add category\"\n  />\n</form>\n{#each categorie as categories (categories.id)}\n  <div class=\"card\">\n    <h2 on:click={(event) => categoryHide(event)}>\n      {categories.text}<span id=\"colIcon\">&gt;</span>\n    </h2>\n    <ul class=\"collapsed\">\n      {#each todos as todo (todo.id)}\n        {#if categories.text === todo.categorieText}\n          <li\n            class:completed={todo.completed}\n            on:click={async () => {\n              todo.completed = !todo.completed;\n              const response = await fetch(`${apiBaseUrl}/todo`, {\n                method: \"PUT\",\n                body: JSON.stringify({\n                  id: todo.id,\n                }),\n                headers: {\n                  \"content-type\": \"application/json\",\n                  authorization: `Bearer ${accessToken}`,\n                },\n              });\n              getToDo()\n                .then(() => {})\n                .catch(() => {\n                  console.log(\"Getting todos failed\");\n                });\n              if (todo.completed) {\n                tsvscode.postMessage({\n                  type: \"onInfo\",\n                  value: todo.text + \" completed! Well done ðŸ¥³\",\n                });\n              }\n              const payload = await response.json();\n              todos = payload.todos;\n            }}\n          >\n            {todo.text}\n          </li>\n        {/if}\n      {/each}\n    </ul>\n  </div>\n{/each}\n\n<style>\n  .completed {\n    text-decoration: line-through;\n    color: rgba(255, 255, 255, 0.5);\n  }\n  li {\n    padding-top: 0.5rem;\n    font-size: calc(11px + 0.5rem);\n  }\n</style>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar _a;\nimport { onMount } from \"svelte\";\n;\nimport ToDos from \"./ToDos.svelte\";\nlet accessToken = \"\";\nlet loading = true;\nlet user = null;\nlet page = ((_a = tsvscode.getState()) === null || _a === void 0 ? void 0 : _a.page) || \"todos\";\n$: {\n    tsvscode.setState({ page });\n}\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    window.addEventListener(\"message\", (event) => __awaiter(void 0, void 0, void 0, function* () {\n        const message = event.data; // The json data that the extension sent\n        switch (message.type) {\n            case \"token\":\n                accessToken = message.value;\n                const response = yield fetch(`${apiBaseUrl}/me`, {\n                    headers: {\n                        authorization: `Bearer ${accessToken}`,\n                    },\n                });\n                const data = yield response.json();\n                user = data.users;\n                loading = false;\n                break;\n        }\n    }));\n    tsvscode.postMessage({ type: \"get-token\", value: undefined });\n}));\n</script>\n\n<div>\n  <h1>To Do List</h1>\n</div>\n{#if loading}\n  <div>loading...</div>\n{:else if user}\n  {#if page === \"todos\"}\n    <ToDos {user} {accessToken} />\n    <button\n      on:click={() => {\n        page = \"rules\";\n      }}>Go to rule</button\n    >\n  {:else}\n    <div>Rules:</div>\n    <ol>\n      <li>\n        <p>To Do items are removed 30 days after being completed.</p>\n      </li>\n    </ol>\n    <button\n      on:click={() => {\n        page = \"todos\";\n      }}>Go to back</button\n    >\n  {/if}\n  <button\n    on:click={() => {\n      accessToken = \"\";\n      user = null;\n      tsvscode.postMessage({ type: \"logout\", value: undefined });\n    }}>Logout</button\n  >\n{:else}\n  <button\n    on:click={() => {\n      tsvscode.postMessage({ type: \"authenticate\", value: undefined });\n    }}>Login with GitHub</button\n  >\n{/if}\n\n<style>\n  li {\n    padding-top: 0.5rem;\n    font-size: calc(11px + 0.5rem);\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAuNE,UAAU,eAAC,CAAC,AACV,eAAe,CAAE,YAAY,CAC7B,KAAK,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACjC,CAAC,AACD,EAAE,eAAC,CAAC,AACF,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,AAChC,CAAC;AC3ID,EAAE,eAAC,CAAC,AACF,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,AAChC,CAAC"
}