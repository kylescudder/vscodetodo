{
  "version": 3,
  "file": "sidebar.css",
  "sources": [
    "ToDos.svelte",
    "sidebar.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { onMount } from \"svelte\";\r\nimport { children } from \"svelte/internal\";\r\n;\r\nimport { apiBaseUrl } from \"../../src/constants\";\r\nexport let user;\r\nexport let accessToken;\r\nlet text = '';\r\nlet categoryText = '';\r\nlet todos = [];\r\nlet selected;\r\nlet answer = \"\";\r\nlet categorie = [];\r\nfunction addToDo(t, categorieText) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const response = yield fetch(`${apiBaseUrl}/todo`, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                text: t,\r\n                categorieText: categorieText,\r\n            }),\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                authorization: `Bearer ${accessToken}`,\r\n            },\r\n        });\r\n        getToDo()\r\n            .then(() => { })\r\n            .catch(() => {\r\n            console.log(\"Getting todos failed\");\r\n        });\r\n        setTimeout(function () {\r\n            hideEmptyCategories();\r\n        }, 100);\r\n    });\r\n}\r\nfunction addCategory(t) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const response = yield fetch(`${apiBaseUrl}/category`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                categorieText: t,\r\n            }),\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                authorization: `Bearer ${accessToken}`,\r\n            },\r\n        });\r\n        categoryPopulate()\r\n            .then(() => {\r\n        })\r\n            .catch(() => {\r\n            console.log('Getting todos failed');\r\n        });\r\n        setTimeout(function () {\r\n            hideEmptyCategories();\r\n        }, 100);\r\n    });\r\n}\r\nfunction getToDo() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const response = yield fetch(`${apiBaseUrl}/todo`, {\r\n            headers: {\r\n                authorization: `Bearer ${accessToken}`,\r\n            },\r\n        });\r\n        const payload = yield response.json();\r\n        todos = payload.data;\r\n        return todos;\r\n    });\r\n}\r\nfunction categoryHide(event) {\r\n    if (!event.target.nextElementSibling.classList.contains(\"collapsed\")) {\r\n        event.target.nextElementSibling.classList.add(\"collapsed\");\r\n        event.target.firstElementChild.classList.remove(\"expanded\");\r\n    }\r\n    else {\r\n        event.target.nextElementSibling.classList.remove(\"collapsed\");\r\n        event.target.firstElementChild.classList.add(\"expanded\");\r\n    }\r\n}\r\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\r\n    window.addEventListener(\"message\", (event) => __awaiter(void 0, void 0, void 0, function* () {\r\n        const message = event.data; // The json data that the extension sent\r\n        switch (message.type) {\r\n            case \"new-todo\":\r\n                addToDo(message.value, selected.toString());\r\n                break;\r\n        }\r\n    }));\r\n    getToDo()\r\n        .then(() => { })\r\n        .catch(() => {\r\n        console.log(\"Getting todos failed\");\r\n    });\r\n    categoryPopulate();\r\n}));\r\nfunction categoryPopulate() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const categorieResponse = yield fetch(`${apiBaseUrl}/categories`, {\r\n            headers: {\r\n                authorization: `Bearer ${accessToken}`,\r\n            },\r\n        });\r\n        const categoriePayload = yield categorieResponse.json();\r\n        categorie = categoriePayload.payload;\r\n        selected = categorie[0].text;\r\n        setTimeout(function () {\r\n            hideEmptyCategories();\r\n        }, 100);\r\n    });\r\n}\r\nfunction hideEmptyCategories() {\r\n    var arr = Array.from(document.getElementsByClassName(\"card\"));\r\n    for (let i = 0; i < arr.length; i++) {\r\n        const element = arr[i];\r\n        const lists = element.children[1];\r\n        if (lists.childElementCount == 0) {\r\n            element.removeAttribute(\"style\");\r\n            element.setAttribute(\"style\", \"display: none;\");\r\n        }\r\n        else {\r\n            element.removeAttribute(\"style\");\r\n            element.setAttribute(\"style\", \"display: block;\");\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<div>Hello {user.name}</div>\r\n<form\r\n  on:submit|preventDefault={async () => {\r\n    addToDo(text, selected.toString());\r\n    text = \"\";\r\n  }}\r\n>\r\n  <input bind:value={text}\r\n  class=\"fieldInput\" placeholder=\"Add this todo\" />\r\n  <select\r\n    bind:value={selected}\r\n    on:blur={() => (answer = \"\")}\r\n    class=\"fieldInput categoryDropdown\"\r\n  >\r\n    {#each categorie as categories}\r\n      <option value={categories.text}>\r\n        {categories.text}\r\n      </option>\r\n    {/each}\r\n  </select>\r\n</form>\r\n<form\r\n  on:submit|preventDefault={async () => {\r\n    addCategory(categoryText);\r\n    categoryText = \"\";\r\n  }}\r\n>\r\n  <input \r\n    bind:value={categoryText}\r\n    class=\"fieldInput categoryDropdown\"\r\n    placeholder=\"Add category\"\r\n  />\r\n</form>\r\n{#each categorie as categories (categories.id)}\r\n  <div class=\"card\">\r\n    <h2 on:click={(event) => categoryHide(event)}>\r\n      {categories.text}<span id=\"colIcon\">&gt;</span>\r\n    </h2>\r\n    <ul class=\"collapsed\">\r\n      {#each todos as todo (todo.id)}\r\n        {#if categories.text === todo.categorieText}\r\n          <li\r\n            class:completed={todo.completed}\r\n            on:click={async () => {\r\n              todo.completed = !todo.completed;\r\n              const response = await fetch(`${apiBaseUrl}/todo`, {\r\n                method: \"PUT\",\r\n                body: JSON.stringify({\r\n                  id: todo.id,\r\n                }),\r\n                headers: {\r\n                  \"content-type\": \"application/json\",\r\n                  authorization: `Bearer ${accessToken}`,\r\n                },\r\n              });\r\n              getToDo()\r\n                .then(() => {})\r\n                .catch(() => {\r\n                  console.log(\"Getting todos failed\");\r\n                });\r\n              if (todo.completed) {\r\n                tsvscode.postMessage({\r\n                  type: \"onInfo\",\r\n                  value: todo.text + \" completed! Well done ðŸ¥³\",\r\n                });\r\n              }\r\n              const payload = await response.json();\r\n              todos = payload.todos;\r\n            }}\r\n          >\r\n            {todo.text}\r\n          </li>\r\n        {/if}\r\n      {/each}\r\n    </ul>\r\n  </div>\r\n{/each}\r\n\r\n<style>\r\n  .completed {\r\n    text-decoration: line-through;\r\n    color: rgba(255, 255, 255, 0.5);\r\n  }\r\n  li {\r\n    padding-top: 0.5rem;\r\n    font-size: calc(11px + 0.5rem);\r\n  }\r\n</style>\r\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar _a;\r\nimport { onMount } from \"svelte\";\r\n;\r\nimport ToDos from \"./ToDos.svelte\";\r\nlet accessToken = \"\";\r\nlet loading = true;\r\nlet user = null;\r\nlet page = ((_a = tsvscode.getState()) === null || _a === void 0 ? void 0 : _a.page) || \"todos\";\r\n$: {\r\n    tsvscode.setState({ page });\r\n}\r\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\r\n    window.addEventListener(\"message\", (event) => __awaiter(void 0, void 0, void 0, function* () {\r\n        const message = event.data; // The json data that the extension sent\r\n        switch (message.type) {\r\n            case \"token\":\r\n                accessToken = message.value;\r\n                const response = yield fetch(`${apiBaseUrl}/me`, {\r\n                    headers: {\r\n                        authorization: `Bearer ${accessToken}`,\r\n                    },\r\n                });\r\n                const data = yield response.json();\r\n                user = data.users;\r\n                loading = false;\r\n                break;\r\n        }\r\n    }));\r\n    tsvscode.postMessage({ type: \"get-token\", value: undefined });\r\n}));\r\n</script>\r\n\r\n<div>\r\n  <h1>To Do List</h1>\r\n</div>\r\n{#if loading}\r\n  <div>loading...</div>\r\n{:else if user}\r\n  {#if page === \"todos\"}\r\n    <ToDos {user} {accessToken} />\r\n    <button\r\n      on:click={() => {\r\n        page = \"rules\";\r\n      }}>Go to rule</button\r\n    >\r\n  {:else}\r\n    <div>Rules:</div>\r\n    <ol>\r\n      <li>\r\n        <p>To Do items are removed 30 days after being completed.</p>\r\n      </li>\r\n    </ol>\r\n    <button\r\n      on:click={() => {\r\n        page = \"todos\";\r\n      }}>Go to back</button\r\n    >\r\n  {/if}\r\n  <button\r\n    on:click={() => {\r\n      accessToken = \"\";\r\n      user = null;\r\n      tsvscode.postMessage({ type: \"logout\", value: undefined });\r\n    }}>Logout</button\r\n  >\r\n{:else}\r\n  <button\r\n    on:click={() => {\r\n      tsvscode.postMessage({ type: \"authenticate\", value: undefined });\r\n    }}>Login with GitHub</button\r\n  >\r\n{/if}\r\n\r\n<style>\r\n  li {\r\n    padding-top: 0.5rem;\r\n    font-size: calc(11px + 0.5rem);\r\n  }\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AAwNE,UAAU,eAAC,CAAC,AACV,eAAe,CAAE,YAAY,CAC7B,KAAK,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACjC,CAAC,AACD,EAAE,eAAC,CAAC,AACF,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,AAChC,CAAC;AC5ID,EAAE,eAAC,CAAC,AACF,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,AAChC,CAAC"
}